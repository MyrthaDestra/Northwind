/*Create the database */

CREATE DATABASE Northwind_Foods;

USE Northwind_Foods;

/*Create tables for database */

CREATE TABLE customers (
    customerID varchar(10),
    companyName varchar(40),
    contactName varchar(40),
    contactTitle varchar(35),
    city varchar(15),
    country varchar(15),
    PRIMARY KEY (customerID)
);

CREATE TABLE employees (
    employeeID int,
    employeeName varchar(30),
    title varchar(30),
    city varchar(15),
    country varchar(15),
    reportsTo int,
    PRIMARY KEY (employeeID)
);

CREATE TABLE categories (
    categoryID int,
    categoryName varchar(30),
    description varchar(60),
    PRIMARY KEY (categoryID)
);

CREATE TABLE products (
    productID int,
    productName varchar(35),
    quantityPerUnit varchar(35),
    unitPrice decimal(10,2),
    discontinued int,
    categoryID int,
    PRIMARY KEY (productID)
);

CREATE TABLE shippers (
    shipperID int ,
    companyName varchar(20),
    PRIMARY KEY (shipperID)
);

CREATE TABLE orders (
    orderID int, 
    customerID varchar(10),
    employeeID int,
    orderDate date,
    requiredDate date,
    shippedDate Varchar(20),
    shipperID int,
    freight decimal(10,2),
    PRIMARY KEY (Orderid)
);

CREATE TABLE order_details (
		orderID int,
    productID int,
    unitPrice decimal(10,2),
	  quantity int,
    discount decimal(10,2),
    PRIMARY KEY (orderID, productID)
);

/* Apply necessary constraints to tables. */
ALTER TABLE order_details ADD CONSTRAINT fk_order_details_productID FOREIGN KEY(productID)
REFERENCES products (productID);

ALTER TABLE orders ADD CONSTRAINT fk_orders_orderID FOREIGN KEY(orderID)
REFERENCES order_details (orderID);

ALTER TABLE orders ADD CONSTRAINT fk_orders_customerID FOREIGN KEY(customerID)
REFERENCES customers (customerID);

ALTER TABLE orders ADD CONSTRAINT fk_orders_employeeID FOREIGN KEY(employeeID)
REFERENCES employees (employeeID);

ALTER TABLE orders ADD CONSTRAINT fk_orders_shipperID FOREIGN KEY(shipperID)
REFERENCES shippers (shipperID);

ALTER TABLE products ADD CONSTRAINT fk_products_categoryID FOREIGN KEY(categoryID)
REFERENCES categories (categoryID);


/* Import the dataset information using MySQL's Table Data Import Wizard. After completing the import process, 
the database will be ready for querying */

/* Calculate the total sales revenue for each product category during the year 2014. */
SELECT 
Year(o.orderdate) As Year,
Sum(od.unitprice*od.quantity) as Total,
ct.categoryName as Category
FROM order_details od
LEFT JOIN products pd on od.productid=pd.productid
LEFT JOIN categories ct on pd.categoryID=ct.categoryID
LEFT JOIN orders o on od.orderid=o.orderid
WHERE Year(o.orderdate) = 2014
GROUP BY Category;

/* Determine the month with the second-highest total sales for the year 2014. */
WITH Months_Total as (
SELECT 
Month(o.orderdate) As Month, 
Sum(od.unitprice*od.quantity) as Total
FROM order_details od
LEFT Join orders o on od.orderID=o.orderID
WHERE Year(o.orderdate)=2014
GROUP BY Month
), 
Ranked as (
Select *, 
RANK() OVER(ORDER BY Total DESC) as Month_Rank
FROM Months_Total
) 
SELECT * from Ranked where Month_Rank = 2;


/* Generate a query that presents a comprehensive list of employees along with their corresponding managers. 
In cases where employees do not have managers, they should be displayed as reporting to themselves. */
SELECT
e.employeeid as 'Employee',
e.employeeName as 'Employee Name',
IFNULL(m.employeeName, e.employeeName) as 'Manager Name'
From employees e
LEFT JOIN employees m ON m.employeeID=e.reportsTo
ORDER BY Employee;

/*Query the database to determine if there are any customers on the database who have never placed an order. */
SELECT ct.*, o.orderid
FROM customers ct
LEFT JOIN orders o ON ct.customerid=o.customerid
WHERE o.orderid IS NULL;


/*Generate a list displaying the total sales generated by each manager's team. Andrew Fuller, the Vice President 
of Sales, does not report to anyone directly. Set Andrew as a manager reporting to himself.*/
SELECT
Year(o.orderdate) as Year,
SUM(od.unitPrice*od.quantity) as Total,
IFNULL(m.EmployeeName, e.employeeName) as Manager_Name
FROM orders o
LEFT JOIN order_details od on o.orderid=od.orderid
LEFT JOIN employees e on o.employeeid=e.employeeid
Left JOIN employees m on m.employeeID=e.reportsto
GROUP BY Year, Manager_Name
ORDER BY Year, Total Desc;


/* Generate a list of employees and their total sales generated for the year 2015, sort by total sales generated from highest to lowest. */
SELECT 
Year(o.orderDate) as Year,
SUM(od.unitprice*quantity) as Total,
e.employeeName
FROM order_details od
LEFT JOIN orders o on od.orderid=o.orderid
LEFT JOIN employees e on o.employeeID=e.employeeID
WHERE Year(o.orderDate)=2015
GROUP BY employeeName
ORDER BY Total DESC;


/* Query the database to determine the day of the week with the highest sales revenue and present a sorted 
list of each day of the week alongside its corresponding sales revenue. The list should be arranged in descending 
order, based on the combined grand total revenue across all years.*/ 
WITH Total_Sales_By_Date as (
SELECT 
od.orderid, 
od.unitprice*quantity as total,
o.orderdate
FROM Order_details od
JOIN Orders o ON od.orderid=o.orderid
)
SELECT sum(total) As Grand_Total, DayOFWeek(orderdate) as Day,
CASE DayOFWeek(orderdate)
WHEN 2 THEN 'Monday'
WHEN 3 THEN 'Tuesday'
WHEN 4 THEN 'Wednesday'
WHEN 5 THEN 'Thursday'
WHEN 6 THEN 'Friday'
ELSE DayOFWeek(orderdate)
END AS 'Weekday'
FROM Total_Sales_By_Date 
GROUP BY Day
Order by Grand_Total Desc;


/* Generate a comprehensive sales report encompassing pertinent details for every order throughout all 
accessible years.*/
SELECT
o.Orderdate as 'Order Date',
od.orderid as 'Order ID', 
c.companyName as 'Customer Name', 
c.city as 'City', 
c.country as 'Country', 
c.ContactName as 'Contact Name',
c.contacttitle as 'Contact Title',
e.Employeename as 'Sales Representative', 
e.Title as 'Sales Rep Title',
IFNULL(m.employeeName, e.Employeename) as 'Sales Manager',
p.productName as 'Product Name',
ca.categoryName as 'Product Category',
od.unitprice as 'Unit Price',
od.quantity as 'Total Units',
od.unitPrice*od.quantity as 'Revenue',
ROUND(od.discount*(od.unitPrice*od.quantity), 2) as 'Discount Provided',
ROUND((od.unitPrice*od.quantity)-(od.discount*(od.unitPrice*od.quantity)),2) as 'Revenue After Discount',
o.freight as 'Shipping Cost Per Order',
s.companyName as 'Shipping Company'
FROM order_details od
LEFT JOIN Orders o on od.orderid=o.orderid
LEFT JOIN customers c on o.customerID=c.customerID
LEFT JOIN employees e on o.employeeID=e.employeeID
LEFT JOIN employees m ON m.employeeID=e.reportsTo
LEFT JOIN products p on od.productID=P.productID
LEFT JOIN categories ca on p.categoryID=ca.categoryID
LEFT JOIN shippers s on o.shipperID=s.shipperID;